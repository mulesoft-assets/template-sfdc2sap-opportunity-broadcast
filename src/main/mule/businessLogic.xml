<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:email="http://www.mulesoft.org/schema/mule/email"
    xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:sap="http://www.mulesoft.org/schema/mule/sap"
    xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">

    <flow name="businessLogicFlow" doc:id="8759532e-79b7-4789-990c-dc8e162bfd67">
		<batch:job jobName="migrateOpportunitiesBatch" doc:id="204892ae-0d97-4326-beae-310c8d52b7a6">
            <batch:process-records>
				<batch:step name="foreachOpportunityInSalesforceGetOpportunityInSAPStep" doc:id="89713774-362a-4e92-9bdc-41e31802bf38">
					<ee:transform doc:name="Set XML input" doc:id="d3e03b82-2a69-4065-b0b7-2108993616a3" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
	"BAPI_SALESORDER_GETLIST": {
		"import": {
			"PURCHASE_ORDER_NUMBER": payload.Id
		}
	}
}]]></ee:set-payload>
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="opportunity" ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<sap:execute-synchronous-remote-function-call doc:id="8e91d619-b8bb-416e-95fb-a5ee170221bd" doc:name="BAPI_SALESORDER_GETLIST" config-ref="SAP_Outbound" key="BAPI_SALESORDER_GETLIST"/>
					<ee:transform doc:name="Store result to variable oppotunity" doc:id="7fd463d3-2c00-4441-9f0f-272d08e200eb">
						<ee:message />
						<ee:variables>
							<ee:set-variable variableName="opportunity"><![CDATA[%dw 2.0
output application/java
---
vars.opportunity ++ {
	SALESDOCUMENT: if(payload."BAPI_SALESORDER_GETLIST".tables."SALES_ORDERS" != null) (payload."BAPI_SALESORDER_GETLIST".tables."SALES_ORDERS".*row[0].SD_DOC) else null
}]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<choice doc:name="Does the opportunity exist in SAP" doc:id="7747b550-f171-4a2b-908e-788d0d0cac74">
						<when expression="#[vars.opportunity.SALESDOCUMENT != null]">
							<ee:transform doc:name="Set XML Input" doc:id="7e2cec8f-dc85-4376-96ed-2bc96351446c">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
output application/xml
---
{
  "BAPI_ISAORDER_GETDETAILEDLIST": {
    "import": {
      "I_BAPI_VIEW": {
        "ITEM": "X",
        "SDCOND": "X"
      }
    },
    "tables": {
      "SALES_DOCUMENTS": {
        "row": {
          "VBELN": vars.opportunity.SALESDOCUMENT
        }
      }
    }
  }
}]]></ee:set-payload>
								</ee:message>
							</ee:transform>
							<sap:execute-synchronous-remote-function-call doc:name="SAP BAPI_ISAORDER_GETDETAILEDLIST" doc:id="848feabe-77b2-4784-8543-4e8e0ebae749" config-ref="SAP_Outbound" key="BAPI_ISAORDER_GETDETAILEDLIST" />
							<ee:transform doc:name="Transform BAPI_ISAORDER_GETDETAILEDLIST to Sales Order" doc:id="1853012d-fbc8-4e33-94c0-844a95b12ffb">
								<ee:message>
								</ee:message>
								<ee:variables >
									<ee:set-variable variableName="opportunity" ><![CDATA[%dw 2.0
output application/java
---
vars.opportunity ++ {
	salesOrderInSap: {
		(Conditions: payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_CONDITIONS_OUT".*row map {
			ITM_NUMBER : $.ITM_NUMBER,
			Id : $.SD_DOC
		})  if (payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_CONDITIONS_OUT" != null),
		(Items: payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_ITEMS_OUT".*row map {
			ITM_NUMBER : $.ITM_NUMBER,
			Id : $.DOC_NUMBER
		})  if (payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_ITEMS_OUT" != null),
		(Partners: payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_PARTNERS_OUT".*row map {
			Id : $.SD_DOC,
			customerId : $.CUSTOMER
		})  if (payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_PARTNERS_OUT" != null),
		(StatusHeaders: payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_STATUSHEADERS_OUT".*row map {
			Id : $.SD_DOC,
			Status : $.ISA_DOC_STATUS
		})  if (payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_STATUSHEADERS_OUT" != null),
		(TextHeaders: payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_TEXTHEADERS_OUT".*row map {
			TextName : $.TEXT_NAME,
			Id : $.SD_DOC
		})  if (payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_TEXTHEADERS_OUT" != null),
		(TextLines: payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_TEXTLINES_OUT".*row map {
			Line : $.LINE,
			TextName : $.TEXT_NAME
		})  if (payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_TEXTLINES_OUT" != null)
	}
}]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
						</when>
						<otherwise>
							<logger level="INFO" doc:name="Log 'The Opportunity does not exist in SAP'" doc:id="2d8f3cb7-6e31-41dc-8d68-0a62c84960c0" message="The Opportunity does not exist in SAP, new one will be created." />
						</otherwise>
					</choice>
					<ee:transform doc:name="Set payload" doc:id="6a500959-23f3-4324-8758-8e1faf2c5b17">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
vars.opportunity]]></ee:set-payload>
								</ee:message>
							</ee:transform>
            </batch:step>
				<batch:step name="findOrCreateCustomerInSapStep" doc:id="21733166-905b-4d52-80df-08df0deeb6d9" acceptExpression="'syncAccount' == '${account.sync.policy}'">
					<ee:transform doc:name="Set XML input" doc:id="711be28c-4a51-407c-9d4e-f582f55ab9e0">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/xml
---
{
  "BAPI_CUSTOMER_FIND": {
    "import": {
      "MAX_CNT": "0",
      "PL_HOLD": "X"
    },
    "tables": {
      "SELOPT_TAB": {
        "row": {
          "TABNAME": "KNA1",
          "FIELDNAME": "NAME1",
          "FIELDVALUE": if(sizeOf(vars.opportunity.Account.Name) > 20) (vars.opportunity.Account.Name[0 to 19]) else vars.opportunity.Account.Name
        }
      }
    }
  }
}]]></ee:set-payload>
						</ee:message>
						<ee:variables>
							<ee:set-variable variableName="account"><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<sap:execute-synchronous-remote-function-call key="BAPI_CUSTOMER_FIND" doc:name="GET Customer by Name" doc:id="636c243d-9258-4f24-b0e5-37304c4423b9" config-ref="SAP_Outbound" />
					<ee:transform doc:name="Set CustomerNumber to opportunity" doc:id="ba2c1e3f-f676-451f-84c8-8f2cfcac614d" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/java
var customers = payload."BAPI_CUSTOMER_FIND".tables."RESULT_TAB".*row map {
	CustomerNumber : if ($.CUSTOMER != "") $.CUSTOMER else null
}
---
vars.opportunity ++ {
	CustomerNumber : if (customers[0].CustomerNumber != null) customers[0].CustomerNumber else null
}]]></ee:set-payload>
						</ee:message>
						<ee:variables />
					</ee:transform>
					<choice doc:name="Does the customer exist in SAP?" doc:id="ae87df03-73b7-403e-bbe0-4d379de945b7">
						<when expression="#[vars.opportunity.CustomerNumber == null]">
							<ee:transform doc:name="Set customer and sales areas from properties" doc:id="0d176727-cded-497a-ba19-85173c6dab7c">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
vars.opportunity ++ {	 	
	SalesOrganization : p('account.sapSalesOrganization'),	
	DistributionChannel : p('account.sapDistributionChannel'),
	Division : p('account.sapDivision'),
	CustomerNumber : p('account.sapCustomerNumber')
}]]></ee:set-payload>
								</ee:message>
							</ee:transform>
						</when>
						<otherwise>
							<ee:transform doc:name="Set XML Input" doc:id="479c97a6-a570-44a5-b0af-34ebf37dfa8f">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
output application/xml
---
{
   "BAPI_CUSTOMER_GETSALESAREAS": {
      "import": {
         "CUSTOMERNO": vars.opportunity.CustomerNumber
      }
   }
}]]></ee:set-payload>
								</ee:message>
							</ee:transform>
							<sap:execute-synchronous-remote-function-call key="BAPI_CUSTOMER_GETSALESAREAS" doc:name="BAPI_CUSTOMER_GETSALESAREAS" doc:id="22e810c0-092e-4b57-a602-5595301e1bfa" config-ref="SAP_Outbound" />
							<ee:transform doc:name="Add data to payload" doc:id="08de3be1-4054-42a9-bf8b-e52a589fea7c">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
output application/java
var salesarea = (payload."BAPI_CUSTOMER_GETSALESAREAS".tables.SALESAREAS.*row map {
	SalesOrganization : $.SALESORG,
	Division : $.DIVISION,
	DistributionChannel : $.DISTRCHN
})[0]
---
if(salesarea != null)
	vars.opportunity ++ salesarea
else
	vars.opportunity]]></ee:set-payload>
								</ee:message>
							</ee:transform>
						</otherwise>
					</choice>
				</batch:step>
				<batch:step name="setCustomerAndSalesOrderFromPropertiesStep" doc:id="66a7a00f-5e53-4715-abc0-61ae247e2b1e" acceptExpression="'syncAccount' != '${account.sync.policy}'">
					<ee:transform doc:name="Set customer and sales areas from properties" doc:id="e185d3e9-934c-4f8b-9be0-57365adf1b6b" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload ++ {
	SalesOrganization : p('account.sapSalesOrganization'),
	DistributionChannel : p('account.sapDistributionChannel'),
	Division : p('account.sapDivision'),
	CustomerNumber : p('account.sapCustomerNumber')
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
				</batch:step>
				<batch:step name="foreachOpportunityInSalesforceUpsertOpportunityInSAPStep" doc:id="78a74ab4-9b91-416d-985a-acda2ac377eb">
					<choice doc:name="salesOrderInSap?" doc:id="b9fd2361-913e-410d-a781-f4844009d645" >
						<when expression="isEmpty(payload.salesOrderInSap)" >
							<ee:transform doc:name="Transform Opportunity to BAPI_SALESORDER_CREATEFROMDAT2" doc:id="b94a6cbb-4133-4bf3-ae45-e648c0f448bb">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
output application/xml
fun convertToArray(record) = {
	records : if (record is Array) record else [record]
}
fun createItmNumber(position) = {
	ITM_NUMBER : (10 * position) as String {format: "000000"}
}
---
"BAPI_SALESORDER_CREATEFROMDAT2"
: {
	"import": {
		"ORDER_HEADER_IN": {
			"DOC_TYPE": "TA",
			"SALES_ORG": payload.SalesOrganization,
			"DISTR_CHAN": payload.DistributionChannel,
			"DIVISION": payload.Division,
			"REQ_DATE_H": if(payload.CloseDate != null) payload.CloseDate replace "-" with "" else null,
			"PURCH_NO_C": payload.Id,
			"CURRENCY": "EUR"
		}
	},
	"tables": {
		("ORDER_CONDITIONS_IN": {
			( convertToArray(payload.OpportunityLineItems).records map {
				"row" : {
					"ITM_NUMBER": createItmNumber($$ + 1).ITM_NUMBER,
					"COND_TYPE": "PR00",
					"COND_VALUE": $.Quantity
				}
			} )
		} ) if payload.OpportunityLineItems != null,
		("ORDER_ITEMS_IN": {
			( convertToArray(payload.OpportunityLineItems).records map {
				"row" : {
					"ITM_NUMBER": createItmNumber($$ + 1).ITM_NUMBER,
					"MATERIAL": $.PricebookEntry.Product2."sap_external_id__c",
					"TARGET_QTY": $.Quantity
				}
			} )
		} ) if payload.OpportunityLineItems != null,
		("ORDER_ITEMS_INX": {
			( convertToArray(payload.OpportunityLineItems).records map {
				"row" : {
					"MATERIAL" : "X",
					"UPDATEFLAG" : "I",
					"ITM_NUMBER" : createItmNumber($$ + 1).ITM_NUMBER
				}
			} )
		} ) if payload.OpportunityLineItems != null,
		"ORDER_PARTNERS": {
			"row" @(id: 1): {
				"PARTN_ROLE": "AG",
				"PARTN_NUMB": payload.CustomerNumber
			}
		},
		("ORDER_SCHEDULES_IN": {
			( convertToArray(payload.OpportunityLineItems).records map {
				"row" : {
					"ITM_NUMBER" : createItmNumber($$ + 1).ITM_NUMBER,
					"REQ_QTY": $.Quantity
				}
			} )
		} ) if payload.OpportunityLineItems != null,
		"ORDER_TEXT": {
			"row" @(id: 1): {
				"TEXT_ID": "0002",
				"LANGU": "EN",
				"TEXT_LINE": payload.Description
			},
			"row" @(id: 2): {
				"TEXT_ID": "0011",
				"LANGU": "EN",
				"TEXT_LINE": payload.ForecastCategory
			},
			"row" @(id: 3): {
				"TEXT_ID": "0001",
				"LANGU": "EN",
				"TEXT_LINE": payload.Name
			}
		}
	}
}
]]></ee:set-payload>
								</ee:message>
							</ee:transform>
							<logger level="INFO" doc:name="Log Opportunities to create" doc:id="9c0a156b-90cc-404f-b003-3d43fbd5fa5f" message="Opportunities to create: #[payload]"/>
							<try doc:name="Try" doc:id="15a95111-e63f-48f3-8e35-4839ed838806" transactionalAction="ALWAYS_BEGIN">
								<sap:execute-synchronous-remote-function-call key="BAPI_SALESORDER_CREATEFROMDAT2" doc:name="BAPI_SALESORDER_CREATEFROMDAT2" doc:id="f91c16df-5450-42ab-8828-a3ce49d17566" config-ref="SAP_Outbound" transactionalAction="ALWAYS_JOIN"/>
							</try>
						</when>
						<otherwise>
							<ee:transform doc:name="Transform Opportunity to BAPI_SALESORDER_CHANGE" doc:id="8312791e-fafd-4ebc-a95d-4fc7ab46250d" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
var maxItmNumber = max(payload.salesOrderInSap.Items.ITM_NUMBER)

fun convertToArray(record) = {
	records : if (record is Array) record else [record]
}
fun createNextItmNumber(position) = {
	ITM_NUMBER : (maxItmNumber + (10 * position)) as String {format: "000000"}
}
---
"BAPI_SALESORDER_CHANGE": {	
		"import": {
			"ORDER_HEADER_IN": {
				"SALES_ORG": payload.SalesOrganization,
				"DISTR_CHAN": payload.DistributionChannel,
				"DIVISION": payload.Division,
				"REQ_DATE_H": payload.CloseDate replace "-" with "",
				"CURRENCY": "EUR"
			},
			"ORDER_HEADER_INX": {
				"UPDATEFLAG": "U",
				"SALES_ORG": "X",
				"DISTR_CHAN": "X",
				"DIVISION": "X",
				"REQ_DATE_H": "X",
				"NAME": "X",
				"WAR_DATE": "X",
				"CURRENCY": "X"
			},
			"SALESDOCUMENT": payload.SALESDOCUMENT
		},
		"tables": {
			("ORDER_ITEM_IN": {( (convertToArray(payload.OpportunityLineItems).records map {
				"row": {
					"ITM_NUMBER": createNextItmNumber($$ + 1).ITM_NUMBER,
					"MATERIAL": $.PricebookEntry.Product2."sap_external_id__c",
					"TARGET_QTY": $.Quantity
					}				
			}) ++ (payload.salesOrderInSap.Items map {
				"row": {
					"ITM_NUMBER": $.ITM_NUMBER					
				}									
			}) )} ) if (payload.OpportunityLineItems != null and payload.salesOrderInSap.Items != null),
			
			("ORDER_ITEM_IN": {( convertToArray(payload.OpportunityLineItems).records map {
				"row": {
					"ITM_NUMBER": createNextItmNumber($$ + 1).ITM_NUMBER,
					"MATERIAL": $.PricebookEntry.Product2."sap_external_id__c",
					"TARGET_QTY": $.Quantity
					}				
			}) }) if (payload.OpportunityLineItems != null and payload.salesOrderInSap.Items == null),
			
			("ORDER_ITEM_IN": {( payload.salesOrderInSap.Items map {
				"row": {
					"ITM_NUMBER": $.ITM_NUMBER					
				}									
			}) }) if (payload.OpportunityLineItems == null and payload.salesOrderInSap.Items != null),
			
			("ORDER_ITEM_INX": {( (payload.salesOrderInSap.Items map {
				"row": {
					"ITM_NUMBER": $.ITM_NUMBER,
					UPDATEFLAG: "D"
				}}) ++ (convertToArray(payload.OpportunityLineItems).records map {
				"row": {
					"ITM_NUMBER": createNextItmNumber($$ + 1).ITM_NUMBER,
					"UPDATEFLAG": "I",
					"MATERIAL": "X",
					"TARGET_QTY": "X"
				}				
			}) )} ) if (payload.OpportunityLineItems != null and payload.salesOrderInSap.Items != null),
			
			("ORDER_ITEM_INX": {( convertToArray(payload.OpportunityLineItems).records map {
				"row": {
					"ITM_NUMBER": createNextItmNumber($$ + 1).ITM_NUMBER,
					"UPDATEFLAG": "I",
					"MATERIAL": "X",
					"TARGET_QTY": "X"
				}				
			}) }) if (payload.OpportunityLineItems != null and payload.salesOrderInSap.Items == null),
			
			("ORDER_ITEM_INX": {( payload.salesOrderInSap.Items map {
				"row": {
					"ITM_NUMBER": $.ITM_NUMBER,
					"UPDATEFLAG": "D"
				}			
			}) }) if (payload.OpportunityLineItems == null and payload.salesOrderInSap.Items != null),
			
			"ORDER_TEXT": {
				"row": {
					"TEXT_ID": "0002",
					"LANGU": "EN",
					"TEXT_LINE": payload.Description
				},
				"row" : {
					"TEXT_ID": "0011",
					"LANGU": "EN",
					"TEXT_LINE": payload.ForecastCategory
				},
				"row" : {
					"TEXT_ID": "0001",
					"LANGU": "EN",
					"TEXT_LINE": payload.Name
				}
			}
		}
	}	]]></ee:set-payload>
								</ee:message>
							</ee:transform>
							<logger level="INFO" doc:name="Log Opportunities to update" doc:id="a67fe6f2-135f-4686-b7e6-dcdbe3136a33" message="Opportunities to update: #[output application/json --- payload]" />
							<try doc:name="Try" doc:id="3025b077-03d6-4499-936d-1183dd78fad7" transactionalAction="ALWAYS_BEGIN">
								<sap:execute-synchronous-remote-function-call key="BAPI_SALESORDER_CHANGE" doc:name="BAPI_SALESORDER_CHANGE" doc:id="9539e09d-6f39-4dcf-bacb-4f6f218d33a3" config-ref="SAP_Outbound" transactionalAction="ALWAYS_JOIN"/>
							</try>
						</otherwise>
					</choice>
            </batch:step>
        </batch:process-records>
<batch:on-complete>
				<ee:transform doc:name="Prepare migration result" doc:id="c84b4bc4-5a65-41c1-9d0c-f1ebd3d8db7a">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output text/plain
---
"Migration Report: \n"
++ "\n Time [milliseconds]: " 		++ payload.elapsedTimeInMillis!
++ "\n Total Records: "				++ payload.totalRecords!
++ "\n Successful Records: "		++ payload.successfulRecords!
++ "\n Failed Records: "			++ payload.failedRecords!
++ "\n Loaded Records: "			++ payload.loadedRecords!
++ "\n Processed Records: " 		++ payload.processedRecords!]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Migration process has finished!" doc:id="b7575d38-7dbd-4602-9186-1bbb25234896"
					message="Migration process has finished: #[payload]" />

			</batch:on-complete>

    </batch:job>
</flow>

</mule>


        
